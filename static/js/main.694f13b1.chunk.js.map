{"version":3,"sources":["components/List.js","mock.js","components/utils.js","components/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["List","props","itemsRef","useRef","useEffect","current","slice","list","length","index","scrollIntoView","behavior","block","inline","className","onMouseMove","updatePointerClass","map","item","i","key","id","isMouseEvent","ref","el","onMouseOver","e","updateIndex","name","address","pincode","items","filterByKey","value","filter","toLocaleUpperCase","indexOf","Searchbar","useState","setValue","setIndex","setMouseEvent","inputRef","filteredList","setFilteredList","filterList","useCallback","array","focus","onChange","target","onKeyDown","onBlur","placeholder","event","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.694f13b1.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nexport default function List(props) {\n  const itemsRef = useRef([]);\n\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, props.list.length);\n  }, [props.list]);\n\n  useEffect(() => {\n    if (itemsRef.current.length && props.index >= 0) {\n      itemsRef.current[props.index].scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"nearest\" });\n    }\n  }, [props.index]);\n\n  if(props.list.length === 0) return <div className=\"no-user\">No user found</div>\n\n  return (\n    <div className=\"list\" onMouseMove={() => props.updatePointerClass()}>\n      {props.list.map((item, i) => (\n        <div\n          key={item.id}\n          className={`item ${i === props.index ? \"active\" : \"\"} ${\n            props.isMouseEvent === false ? \"pointer-events-none\" : \"\"\n          }`}\n          ref={(el) => (itemsRef.current[i] = el)}\n          onMouseOver={(e) => props.updateIndex(i, e)}\n        >\n          <div className=\"item__id\">{item.id}</div>\n          <div className=\"item__name\">{item.name}</div>\n          <div className=\"item__address\">{item.address}</div>\n          <div className=\"item__pincode\">{item.pincode}</div>\n          <div className=\"item__container\">\n            {item.items.map((item) => (\n              <div key={item} className=\"item__container__child\">{`${item}`}</div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","export const list = [\n  {\n    \"id\": \"123-s2-546\",\n    \"name\": \"John Jacobs\",\n    \"items\": [\"bucket\", \"bottle\"],\n    \"address\": \"1st Cross, 9th Main, abc Apartment\",\n    \"pincode\": \"5xx012\"\n  },\n  {\n    \"id\": \"123-s3-146\",\n    \"name\": \"David Mire\",\n    \"items\": [\"Bedroom Set\"],\n    \"address\": \"2nd Cross, BTI Apartment\",\n    \"pincode\": \"4xx012\"\n  },\n  {\n    \"id\": \"223-a1-234\",\n    \"name\": \"Soloman Marshall\",\n    \"items\": [\"bottle\"],\n    \"address\": \"Riverbed Apartment\",\n    \"pincode\": \"4xx032\"\n  },\n  {\n    \"id\": \"121-s2-111\",\n    \"name\": \"Ricky Beno\",\n    \"items\": [\"Mobile Set\"],\n    \"address\": \"Sunshine City\",\n    \"pincode\": \"5xx072\"\n  },\n  {\n    \"id\": \"123-p2-246\",\n    \"name\": \"Sikander Singh\",\n    \"items\": [\"Air Conditioner\"],\n    \"address\": \"Riverbed Apartment\",\n    \"pincode\": \"4xx032\"\n  },\n  {\n    \"id\": \"b23-s2-321\",\n    \"name\": \"Ross Wheeler\",\n    \"items\": [\"Mobile\"],\n    \"address\": \"1st Cross, 9th Main, abc Apartement\",\n    \"pincode\": \"5xx012\"\n  },\n  {\n    \"id\": \"113-n2-563\",\n    \"name\": \"Ben Bish\",\n    \"items\": [\"Kitchen Set\", \"Chair\"],\n    \"address\": \"Sunshine City\",\n    \"pincode\": \"5xx072\"\n  },\n  {\n    \"id\": \"323-s2-112\",\n    \"name\": \"John Michael\",\n    \"items\": [\"Refrigerator\"],\n    \"address\": \"1st Cross, 9th Main, abc Apartement\",\n    \"pincode\": \"5xx012\"\n  },\n  {\n    \"id\": \"abc-34-122\",\n    \"name\": \"Jason Jordan\",\n    \"items\": [\"Mobile\"],\n    \"address\": \"Riverbed Apartment\",\n    \"pincode\": \"4xx032\"\n  }\n]","export const filterByKey = (key, value) => {\n  if(typeof key === 'object'){\n    return key.filter(item =>  item.toLocaleUpperCase().indexOf(value.toLocaleUpperCase()) !== -1).length;\n  }\n  return key.toLocaleUpperCase().indexOf(value.toLocaleUpperCase()) !== -1;\n}","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport List from \"./List.js\";\nimport { list } from \"../mock.js\";\nimport { filterByKey } from \"./utils.js\";\n\nexport default function Searchbar() {\n  const [value, setValue] = useState(\"\");\n  const [index, setIndex] = useState(-1);\n  const [isMouseEvent, setMouseEvent] = useState(true);\n  const inputRef = useRef(null);\n  const [filteredList, setFilteredList] = useState([]);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const updatePointerClass = () => {\n    setMouseEvent(true);\n  };\n\n  const focusOnList = (e) => {\n    if (!value) return;\n    setMouseEvent(false);\n    if (index === filteredList.length - 1 && e.key === \"ArrowDown\") {\n      setIndex(-1);\n      return;\n    }\n    if (index === -1 && e.key === \"ArrowUp\") {\n      setIndex(filteredList.length - 1);\n      return;\n    }\n    if (e.key === \"ArrowDown\" && index < filteredList.length) {\n      setIndex((index) => index + 1);\n    } else if (index > -1 && e.key === \"ArrowUp\") {\n      setIndex((index) => index - 1);\n    }\n  };\n\n  const updateIndex = (index, event) => {\n    setMouseEvent(true);\n    setIndex(index);\n  };\n\n  const filterList = useCallback(() => {\n    let array = list.filter((item) => {\n      return (\n        filterByKey(item.items, value) ||\n        filterByKey(item.name, value) ||\n        filterByKey(item.id, value) ||\n        filterByKey(item.address, value) ||\n        filterByKey(item.pincode, value)\n      );\n    });\n    setFilteredList(array);\n  }, [value]);\n\n  const handleBlur = () => {\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    filterList();\n  }, [value, filterList]);\n\n  return (\n    <div className=\"searchbar\">\n      <input\n        value={value}\n        onChange={handleChange}\n        onKeyDown={focusOnList}\n        ref={inputRef}\n        onBlur={handleBlur}\n        placeholder=\"Search by ID, name, address...\"\n        className=\"input\"\n      />\n      {value && (\n        <List\n          list={filteredList}\n          index={index}\n          updateIndex={updateIndex}\n          isMouseEvent={isMouseEvent}\n          updatePointerClass={updatePointerClass}\n        />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport SearchBar from './components/Searchbar.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}